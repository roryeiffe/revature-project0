This file will be used to plan out the database and classes for project 0. 

Project specs:

# Bank 
## Description The Bank app is a console-based application that simulates banking operations. 
A customer can apply for an account, view their balance, and make withdrawals and deposits. 
An employee can approve or deny accounts and view account balances for their customers.

## Purpose We want to see that you can meet deadlines and that you can code. 
You are expected to complete the following requirements and give a 5 minute presentation of your project to our QC team. 

## Requirements 
1. Functionality should reflect the below user stories. 
2. Data is stored in a database. 
3. A custom stored procedure is called to perform some portion of the functionality. 
4. Data Access is performed through the use of JDBC in a data layer consisting of Data Access Objects. 
5. All input is received using the java.util.Scanner class. 
6. Log4j is implemented to log events to a file. 
7. A minimum of one (1) JUnit test is written to test some functionality. 

## User Stories 
* As a user, I can login. 
* As a customer, I can apply for a new bank account with a starting balance. 
* As a customer, I can view the balance of a specific account. 
* As a customer, I can make a withdrawal or deposit to a specific account. 
* As the system, I reject invalid transactions. 
* Ex: * A withdrawal that would result in a negative balance.
* A deposit or withdrawal of negative money. 
* As an employee, I can approve or reject an account. 
* As an employee, I can view a customer's bank accounts. 
* As a user, I can register for a customer account. 
* As a customer, I can post a money transfer to another account. 
* As a customer, I can accept a money transfer from another account. 
* A an employee, I can view a log of all transactions.

SQL Database set up:

Customer:
	id 				integer Primary Key, auto_increment
	user_id 		integer foreign key referencing User(id)

Employee:
	id 				integer Primary Key, auto_increment
	user_id 		integer foreign key referencing User(id)

Account:
	id 				integer Primary Key auto_increment
	type			char(50)
	cust_id 		integer foreign key Referencing Customer(id)
	balance 		integer, cannot be negative, default to 0
	activated		boolean

Transaction:
    id              integer Primary Key auto_increment
    donor_id        integer foreign key referencing customer(id)
    recip_id        integer foreign key referencing customer(id)
    amount          integer
    status          char(50), default to pending

create table transaction (
    id integer primary key auto_increment,
    donor_id integer,
    recip_id integer,
    amount integer,
    status char(50) DEFAULT 'pending',
    CONSTRAINT fk_donor FOREIGN KEY (donor_id) REFERENCES customer(id),
    CONSTRAINT fk_recip FOREIGN KEY (recip_id) REFERENCES customer(id)
    );


create table account (id integer primary key auto_increment, name char(50),
cust_id integer, balance integer, status char(50) DEFAULT 'unverified', CONSTRAINT fk_cust FOREIGN KEY (cust_id) REFERENCES customer (id));

User:
	id 				integer Primary Key, auto_increment
	name 			char(50)
	password 		char(50)


Java Class Set up:



User:
	// every user will have these instance variables:
	Instance variables:
		int id
		String name
		String password
		bool loggedIn

	// every user will be able to perform this methods:
	Methods:

		// creates a new entry in the users database and populates these fields
		returns the id of the user, also sets logged in to true:
		void register(string name, string password)

		// checks the id and password against the database, sets logged in to true
		// if successful, also returns boolean indicating success:
		bool logIn(int id, string password) 

		// 

Customer extends User:
	Instance Variables:
		List<Accounts>

	Methods:
		// creates a new entry in the customer database and populates these fields
		returns the id of the user, also sets logged in to true:
		void register(string name, string password)

		// apply for an account, create a 
		apply()

		// attempts to deposit in a specific account
		// return true if transaction was successful
		boolean deposit (int accountNumber, int amount)

		// attempts to withdraw money from a specific account
		boolean withdraw (int accountNumber, int amount)

Employee extends User:
	Instance Variables:

	Methods:
		// returns information about an account:
		viewAccount(int customerId)

		// approve the creation of an account
		approveAccount(int accountNumber)

class Account {
	int balance = 0
	// attempts to deposit in a specific account
	// return true if transaction was successful
	boolean deposit (int accountNumber, int amount)

	// attempts to withdraw money from a specific account
	boolean withdraw (int accountNumber, int amount)

}









	